using TheFipster.Aviation.Domain.BlackBox;
using TheFipster.Aviation.Domain.Enums;
using TheFipster.Aviation.Domain.Simbrief.Kml;
using TheFipster.Aviation.Domain.Simbrief.Xml;

namespace TheFipster.Aviation.Domain
{
    public class FlightImport : FlightBase
    {
        /// <summary>
        /// Contains all information generated during a flight.
        ///     - Simbrief dispatch
        ///         - Flight data
        ///         - Notams
        ///         - OFP
        ///     - SimToolkitPro SQLite export
        ///         - Logbook
        ///         - Landing
        ///         - Track
        ///     - Blackbox recording
        ///         - Records
        /// </summary>
        /// <param name="departure">Planned departure airport ICAO</param>
        /// <param name="arrival">Planned arrival airport ICAO</param>
        public FlightImport(string departure, string arrival)
            : base(FileTypes.ImportJson, departure, arrival)
        { }


        /// <summary>
        /// Contents of the SimToolkitPro SQLite database.
        /// </summary>
        public SimToolkitProFlight? SimToolkitPro { get; set; }
        public bool HasSimToolkitPro => SimToolkitPro != null;

        /// <summary>
        /// Records from the Blackbox recorder.
        /// </summary>
        public ICollection<Record>? Blackbox { get; set; }
        public bool HasBlackbox => Blackbox != null && Blackbox.Any();

        /// <summary>
        /// Route generated by Simbrief dispatch.
        /// </summary>
        public SimbriefKmlRaw SimbriefKml { get; set; }
        public bool HasSimbriefKml => SimbriefKml != null;


        /// <summary>
        /// Contents of the xml data file from Simbrief dispatch.
        /// </summary>
        public SimbriefXmlRaw SimbriefXml { get; set; }
        public bool HasSimbriefXml => SimbriefXml != null;
    }
}
